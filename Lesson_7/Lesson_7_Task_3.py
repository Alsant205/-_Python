"""3) Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка.
В его конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны
быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
умножение (__mul__()), деление (__floordiv__()). """

"""Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное
(с округлением до целого) деление клеток, соответственно. 
- Сложение.Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух 
клеток. 
- Вычитание.Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух
клеток больше нуля, иначе выводить соответствующее сообщение. 
- Умножение.Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества 
ячеек этих двух клеток. 
- Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное 
деление количества ячеек этих двух клеток. """

"""В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. 
Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку вида *****\n*****\n*****..., 
где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в 
последний ряд записываются все оставшиеся. 
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет 
строку: *****\n*****\n**. Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод 
make_order() вернет строку: *****\n*****\n*****. """


class Cell:
    def __init__(self, nest: int):
        self.nest = nest

    def __add__(self, other):
        return f'Количество ячеек при сложении клеток: {self.nest + other.nest}'

    def __str__(self):
        return str(self.nest)

    def __sub__(self, other):
        return f'Количество ячеек при вычитании клеток: {self.nest - other.nest}' \
            if self.nest >= other.nest \
            else f'Вычитание невозможно, разность будет отрицательная.'

    def __mul__(self, other):
        return f'Количество ячеек при умножении клеток: {self.nest * other.nest}'

    def __floordiv__(self, other):
        return f'Количество ячеек при делении клеток: {self.nest // other.nest}' \
            if self.nest > other.nest \
            else f'Делимая клетка меньше делителя, нацело подедить невозможно'

    def make_order(self, row: int):
        single_row = "*" * row
        number_row = self.nest // row
        part_row = "*" * (self.nest % row)
        return '\nРезультат разрезания клетки\n' + (single_row + "\n") * number_row + part_row


cell_1 = Cell(4)
cell_2 = Cell(18)

print(cell_1, cell_2)
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 // cell_2)
print(cell_2.make_order(5))
